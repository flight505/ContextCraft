name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          # --- FIX: Use a newer Node.js version ---
          node-version: 18 # Or 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      # Keep verification steps if they are useful debugging for you
      - name: Verify package.json config (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash # Ensure bash for [[ syntax
        run: |
          echo "Verifying package.json configuration for macOS build..."
          # ... (your verification commands here) ...

      - name: Free Disk Space (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash # Ensure bash
        run: |
          echo "Available disk space before cleanup:"
          df -h
          # ... (your cleanup commands here) ...
          echo "Available disk space after cleanup:"
          df -h

      - name: Prepare Environment (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash # Ensure bash for [[ syntax
        run: |
          echo "Checking Apple signing environment variables..."
          echo "APPLE_ID is set: ${{ secrets.APPLE_ID != '' }}"
          echo "APPLE_APP_SPECIFIC_PASSWORD is set: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD != '' }}"
          echo "APPLE_TEAM_ID is set: ${{ secrets.APPLE_TEAM_ID != '' }}"
          echo "CSC_LINK is set: ${{ secrets.CSC_LINK != '' }}"
          echo "CSC_KEY_PASSWORD is set: ${{ secrets.CSC_KEY_PASSWORD != '' }}"
          
          # Check for empty values (content length)
          if [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then
            echo "APPLE_TEAM_ID is properly set with content"
          else
            echo "⚠️ WARNING: APPLE_TEAM_ID appears to be empty!"
          fi

          # Clean previous builds (optional, electron-builder usually handles this)
          echo "Cleaning previous builds directory..."
          rm -rf release-builds || true
          mkdir -p release-builds

      - name: Build the app
        # --- FIX: Explicitly use bash shell ---
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Only include Apple secrets if actually signing (mac-build.js might handle skipping)
          # Consider adding conditional logic here or relying on mac-build.js checks
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DEBUG: electron-builder,electron-osx-sign*
          # Add CI=true if your script or electron-builder needs it
          CI: true
        run: |
          # --- REFINEMENT: Run Vite build once before OS-specific packaging ---
          # Make sure 'npm run build' is NOT called inside mac-build.js if you keep it here
          echo "Running Vite build..."
          npm run build

          # --- REFINEMENT: Simplify OS-specific logic ---
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "Building for macOS using mac-build.js script..."
            # Assuming mac-build.js handles electron-builder, checks, permissions, fallback DMG
            # Pass --skip-signing conditionally if needed, or let the script detect env vars
            # Example: check if secrets are present
            if [[ -z "${{ secrets.CSC_LINK }}" || -z "${{ secrets.CSC_KEY_PASSWORD }}" ]]; then
              echo "Signing secrets not found, attempting build with --skip-signing..."
              node scripts/mac-build.js --verbose --skip-signing
            else
              echo "Signing secrets found, attempting signed build..."
              node scripts/mac-build.js --verbose
            fi

          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "Building for Windows..."
            npm run package:win
          fi

      - name: List Build Output
        # --- FIX: Explicitly use bash shell ---
        shell: bash
        run: |
          echo "Listing build output in release-builds/:"
          ls -R release-builds/ || echo "No files found in release-builds"

          echo "Finding and sizing primary artifacts:"
          find release-builds -type f -name "*.dmg" -o -name "*.zip" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | while read file; do
            SIZE=$(du -h "$file" | cut -f1)
            echo " - Found: $file ($SIZE)"
          done

      - name: Release
        uses: softprops/action-gh-release@v1
        # Run this step only if the job succeeded and it's a tag push
        if: success() && startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release-builds/**/*.dmg
            release-builds/**/*.zip
            release-builds/**/*.exe
            release-builds/**/*.msi
            release-builds/**/*.AppImage
            release-builds/**/*.deb
            release-builds/**/*.rpm
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}