name: PR Checks

on:
  pull_request:
    branches: [main]
  # Also run on push to main to help debug any issues
  push:
    branches: [main]

jobs:
  status-check:
    name: Validate PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint || echo "Linting issues found"
        
      - name: Verify Vite build
        run: npm run build

  macos-build:
    name: Test macOS Build
    needs: status-check
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check macOS environment
        run: |
          echo "=== macOS Version ==="
          sw_vers
          
          echo "=== Available Disk Space Before Cleanup ==="
          df -h
      
      - name: Free up disk space
        run: |
          echo "Freeing up disk space..."
          sudo rm -rf /Library/Developer/CommandLineTools
          sudo rm -rf /Library/Developer/CoreSimulator
          sudo rm -rf /Library/Java
          sudo rm -rf ~/Library/Caches/*
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          echo "=== Available Disk Space After Cleanup ==="
          df -h
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
      
      - name: Check environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "PWD: $(pwd)"
          ls -la
          echo "PATH: $PATH"
      
      - name: Install dependencies
        run: npm ci
        env:
          CI: true
      
      - name: Verify package.json configuration
        run: |
          echo "Checking package.json build configuration for macOS:"
          grep -A 30 '"mac":' package.json || echo "No mac configuration found!"
          echo "Checking build scripts:"
          grep -A 20 '"scripts":' package.json
      
      - name: Check for Apple signing credentials
        run: |
          echo "Checking for code signing credentials (redacted):"
          if [ -n "${{ secrets.CSC_LINK }}" ]; then echo "✅ CSC_LINK is set"; else echo "❌ CSC_LINK is not set"; fi
          if [ -n "${{ secrets.CSC_KEY_PASSWORD }}" ]; then echo "✅ CSC_KEY_PASSWORD is set"; else echo "❌ CSC_KEY_PASSWORD is not set"; fi
          if [ -n "${{ secrets.APPLE_ID }}" ]; then echo "✅ APPLE_ID is set"; else echo "❌ APPLE_ID is not set"; fi
          if [ -n "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" ]; then echo "✅ APPLE_APP_SPECIFIC_PASSWORD is set"; else echo "❌ APPLE_APP_SPECIFIC_PASSWORD is not set"; fi
          if [ -n "${{ secrets.APPLE_TEAM_ID }}" ]; then echo "✅ APPLE_TEAM_ID is set"; else echo "❌ APPLE_TEAM_ID is not set"; fi
      
      - name: Clean previous builds
        run: |
          if [ -d "release-builds" ]; then
            echo "Removing previous build artifacts..."
            rm -rf release-builds
            mkdir -p release-builds
          else
            echo "Creating release-builds directory..."
            mkdir -p release-builds
          fi
      
      - name: Run Vite build
        run: npm run build
        env:
          CI: true
      
      - name: Build macOS app
        run: |
          echo "Starting macOS build with code signing disabled..."
          node scripts/mac-build.js --skip-signing --verbose
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: electron-builder,electron-osx-sign*
          CI: true
      
      - name: Debug build output
        if: always()
        run: |
          echo "=== Disk space after build ==="
          df -h
          
          echo "=== Contents of project root ==="
          ls -la
          
          echo "=== Contents of release-builds directory ==="
          ls -la release-builds || echo "release-builds directory not found!"
          
          echo "=== Searching for build artifacts ==="
          find . -name "*.dmg" -o -name "*.zip" -o -name "*.app" | sort
          
          echo "=== Checking app bundle permissions ==="
          find . -path "*.app/Contents/MacOS/*" -type f -exec ls -la {} \; || echo "No app bundles found"
      
      - name: Set executable permissions
        if: always()
        run: |
          echo "Setting executable permissions for all app bundles..."
          find . -path "*.app/Contents/MacOS/*" -type f -exec chmod +x {} \; || echo "No executables found"
          
          # Verify permissions were set
          echo "Verifying permissions after chmod..."
          find . -path "*.app/Contents/MacOS/*" -type f -exec ls -la {} \; || echo "No executables found"
      
      - name: Create test DMG if needed
        if: always()
        run: |
          if [ $(find . -name "*.dmg" | wc -l) -eq 0 ]; then
            echo "No DMG files found. Attempting manual DMG creation..."
            
            # Find any app bundles
            APP_PATH=$(find release-builds -name "*.app" -type d | head -n 1)
            
            if [ -n "$APP_PATH" ]; then
              echo "Found app bundle at $APP_PATH"
              
              # Set executable permissions again to be sure
              find "$APP_PATH" -path "*/Contents/MacOS/*" -type f -exec chmod +x {} \;
              
              # Try to create DMG using hdiutil
              DMG_PATH="release-builds/ContextCraft-fallback.dmg"
              echo "Creating fallback DMG at $DMG_PATH..."
              
              hdiutil create -volname "ContextCraft" -srcfolder "$APP_PATH" -ov -format UDZO "$DMG_PATH" || \
                echo "Failed to create fallback DMG"
              
              ls -la release-builds/*.dmg || echo "Still no DMG files found"
            else
              echo "No app bundles found to create DMG from"
            fi
          else
            echo "DMG files already exist, no need to create fallback"
          fi
      
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-artifacts
          path: |
            release-builds/**/*
            dist/**/*
            logs/**/*
          retention-days: 7 

  test-macos:
    name: Test macOS build
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Test macOS build
        run: |
          echo "Testing macOS build with signing disabled..."
          DEBUG=electron-builder,electron-osx-sign* npm run test-build:mac-no-sign
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
          DISABLE_NOTARIZATION: true
          CSC_IDENTITY_AUTO_DISCOVERY: false 