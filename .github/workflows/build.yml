name: Build and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    env:
      NPM_CONFIG_IGNORE_SCRIPTS: 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm install
      - run: npm run lint || true
      - run: npm run build:ci
        env:
          CI: true

  test_native_modules:
    name: Test Native Modules
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        node-version: [20]
    env:
      # Set correct C++20 flags for MSVC
      CXX_FLAGS: "/std:c++20"
      CXXFLAGS: "/std:c++20"
      npm_config_msvs_version: "2022"
      npm_config_node_gyp_force_unsupported_msvs_version: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      
      # Set up Python explicitly for node-gyp
      - name: Set up Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      # Configure npm to use the correct Python path
      - name: Configure npm to use Python
        run: |
          echo "PYTHON=${{ env.pythonLocation }}\python.exe" >> $env:GITHUB_ENV
          echo "npm_config_node_gyp=$env:APPDATA\npm\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js" >> $env:GITHUB_ENV
          echo "Using Python at: ${{ env.pythonLocation }}\python.exe"
        shell: pwsh
      
      - name: Install dependencies
        run: npm install
      
      - name: Setup Visual Studio on Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.x
      
      - name: Verify binding.gyp files
        run: node scripts/verify-cpp20-bindings.js --verbose
        
      - name: Patch binding.gyp files if needed
        run: node scripts/verify-cpp20-bindings.js --patch --verbose
      
      - name: Test tree-sitter native module rebuild
        run: |
          echo "Testing tree-sitter rebuild with C++20..."
          npm rebuild tree-sitter --verbose
        
      - name: Test other tree-sitter modules
        run: |
          echo "Testing other tree-sitter modules..."
          npm rebuild tree-sitter-javascript tree-sitter-typescript tree-sitter-python tree-sitter-css tree-sitter-html --verbose
      
      - name: Capture node-gyp debug output
        if: always()
        run: |
          echo "Node-gyp configuration:"
          node -e "console.log('node-gyp version:', require('node-gyp/package.json').version)"
          node -e "console.log('C++ flags:', process.env.CXXFLAGS, process.env.CXX_FLAGS)"
          node -e "console.log('MSVC version:', process.env.npm_config_msvs_version)"
        
      - name: Upload binding.gyp files for analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: binding-gyp-files
          path: |
            node_modules/tree-sitter/binding.gyp
            node_modules/tree-sitter*/binding.gyp
          if-no-files-found: warn

  build_mac:
    name: Build macOS
    needs: [validate, test_native_modules]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    env:
      CXXFLAGS: --std=c++20
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      CSC_IDENTITY_AUTO_DISCOVERY: true
      CSC_PARALLEL_SIGNING: 'true'
      CSC_NUM_THREADS: '4'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules with C++20
        run: |
          npm run rebuild-native-modules

      - name: Build Vite App
        run: npm run build:ci
        env:
          CI: true

      - name: Create release-builds directory
        run: mkdir -p release-builds

      - name: Package Application
        run: npm run package:mac --verbose

      - name: List Build Output
        run: |
          echo "Artifacts:"  
          ls -R release-builds || echo "No artifacts found"

      - uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            release-builds/**/*.dmg
            release-builds/**/*.zip
          if-no-files-found: warn

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release-builds/**/*.dmg
            release-builds/**/*.zip
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_win:
    name: Windows build
    needs: test_native_modules
    runs-on: windows-latest
    env:
      # Set correct C++20 flags for MSVC
      CXX_FLAGS: "/std:c++20"
      CXXFLAGS: "/std:c++20"
      npm_config_msvs_version: "2022"
      npm_config_node_gyp_force_unsupported_msvs_version: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          
      # Set up Python explicitly for node-gyp
      - name: Set up Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      # Configure npm to use the correct Python path
      - name: Configure npm to use Python
        run: |
          echo "PYTHON=${{ env.pythonLocation }}\python.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "npm_config_node_gyp=$env:APPDATA\npm\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh
      
      # Set up Visual Studio Developer Command Prompt environment
      - name: Setup Visual Studio Developer Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          toolset: 14.x
      
      - name: Install dependencies
        run: npm ci
        env:
          npm_config_python: ${{ env.PYTHON }}
      
      - name: Verify and patch binding.gyp files
        run: node scripts/verify-cpp20-bindings.js --patch

      - name: Rebuild native modules with C++20
        run: |
          npm run rebuild-native-modules

      - name: Build Vite App
        run: npm run build:ci
        env:
          CI: true

      - name: Create release-builds directory
        run: mkdir -Force release-builds
        shell: pwsh

      - name: Package Application
        run: npm run package:win --verbose

      - name: List Build Output
        run: |
          echo "Artifacts:"  
          dir release-builds -Recurse || echo "No artifacts found"
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: release-builds/**/*.exe
          if-no-files-found: warn

      # For Windows, instead of creating separate releases, we'll upload to the same release
      # that the macOS job creates, but we'll do it conditionally
      - name: Wait for 30 seconds to ensure macOS job has created the release
        if: startsWith(github.ref, 'refs/tags/')
        run: Start-Sleep -s 30
        shell: pwsh
        
      - name: Upload Windows artifacts to existing release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: release-builds/**/*.exe
          draft: false
          # Don't generate notes again - the macOS job already did this
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}