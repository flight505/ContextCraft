name: Build and Release CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*' # Trigger on version tags
  pull_request:
    branches:
      - main

jobs:
  build_and_maybe_release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Allow other platforms to continue if one fails
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            package_cmd: npm run package:mac --verbose
            artifact_pattern: release-builds/ContextCraft*.{dmg,zip}
            release_glob: |
              release-builds/ContextCraft*.dmg
              release-builds/ContextCraft*.zip
          - os: windows-latest
            package_cmd: npm run package:win --verbose
            artifact_pattern: release-builds/ContextCraft*.{exe,msi}
            release_glob: release-builds/ContextCraft*.exe
          - os: ubuntu-latest
            package_cmd: npm run package:linux --verbose
            artifact_pattern: release-builds/ContextCraft*.{AppImage,deb,rpm}
            release_glob: release-builds/ContextCraft*.AppImage

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Debug - Environment info
        run: |
          echo "OS: ${{ runner.os }}"
          echo "Node: $(node -v)"
          echo "NPM: $(npm -v)"
          echo "Working directory: $(pwd)"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Is tag: ${{ startsWith(github.ref, 'refs/tags/') }}"

      - name: Install dependencies
        run: npm ci
        continue-on-error: false

      - name: List installed packages
        run: npm list --depth=0 || true

      - name: Build Vite app
        run: npm run build
        env:
          CI: true

      - name: Debug - Project structure before build
        run: |
          echo "Package.json contents (build section):"
          if [ "${{ runner.os }}" == "Windows" ]; then
            Get-Content package.json | Select-String -Pattern '"build":' -SimpleMatch -Context 0,50
          else
            grep -A 50 '"build":' package.json
          fi
          
          echo "Project structure:"
          if [ "${{ runner.os }}" == "Windows" ]; then
            Get-ChildItem -Recurse -Depth 2 | Where-Object { -not $_.FullName.Contains("node_modules") -and -not $_.FullName.Contains(".git") } | Select-Object FullName
          else
            find . -type d -not -path "*/node_modules/*" -not -path "*/.git/*" -maxdepth 3 | sort
          fi
        shell: bash

      # Create release-builds directory to ensure it exists
      - name: Create release-builds directory
        run: mkdir -p release-builds
        shell: bash

      - name: Package Application
        run: ${{ matrix.package_cmd }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Disable macOS code signing
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # Skip notarization
          NOTARIZE: false
          # Enable electron-builder debugging
          DEBUG: electron-builder

      - name: List Build Output (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Listing output in release-builds..."
          ls -lha release-builds/ || echo "release-builds directory not found or empty."
          
          echo "Listing dist directory..."
          ls -lha dist/ || echo "dist directory not found or empty."
          
          echo "Finding specific files..."
          find . -type f \( -name "ContextCraft*.dmg" -o -name "ContextCraft*.zip" -o -name "ContextCraft*.exe" -o -name "ContextCraft*.msi" -o -name "ContextCraft*.AppImage" -o -name "ContextCraft*.deb" -o -name "ContextCraft*.rpm" \) | grep -v "node_modules" || echo "No expected artifacts found."
        shell: bash

      - name: List Build Output (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Listing output in release-builds..."
          if (Test-Path -Path release-builds) { 
            Get-ChildItem -Path release-builds -Force 
          } else { 
            echo "release-builds directory not found or empty."
          }
          
          echo "Listing dist directory..."
          if (Test-Path -Path dist) { 
            Get-ChildItem -Path dist -Force 
          } else { 
            echo "dist directory not found or empty."
          }
          
          echo "Finding specific files..."
          Get-ChildItem -Path . -Recurse -Include "ContextCraft*.dmg","ContextCraft*.zip","ContextCraft*.exe","ContextCraft*.msi","ContextCraft*.AppImage","ContextCraft*.deb","ContextCraft*.rpm" -ErrorAction SilentlyContinue

      - name: Debug build output location
        run: |
          echo "Project root contents:"
          ls -la
          
          echo "Looking for all build artifacts recursively:"
          find . -type f \( -name "ContextCraft*.dmg" -o -name "ContextCraft*.zip" -o -name "ContextCraft*.exe" -o -name "ContextCraft*.AppImage" -o -name "ContextCraft*.deb" -o -name "ContextCraft*.rpm" \) | grep -v "node_modules" || echo "No expected artifacts found."
        shell: bash

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: ${{ matrix.artifact_pattern }}
          if-no-files-found: warn

      # Release step - Only run on tags
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.release_glob }}
          fail_on_unmatched_files: false # Set to false during debugging, true once stable
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}