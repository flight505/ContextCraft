# .github/workflows/build.yml
name: Build and Release Electron App

on:
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [main]
    tags: ['v*'] # Trigger on version tags like v*.*.*
  pull_request:
    branches: [main]

# Cancel redundant builds on PR pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 1. Validate Code (Quick check on Ubuntu)
  validate:
    name: Validate Code (Lint & Build Frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies (Ignoring Scripts)
        run: npm ci --ignore-scripts
        env:
          NPM_CONFIG_IGNORE_SCRIPTS: 'true'

      - name: Lint Code
        run: npm run lint:strict # Fail build on lint errors

      - name: Build Frontend (Vite)
        run: npm run build # Assumes 'vite build'

      - name: Upload Dist Artifact (Optional, if needed by build jobs)
        uses: actions/upload-artifact@v4
        with:
          name: dist-artifact
          path: dist/

  # 2. Build macOS App
  build_macos:
    name: Build and Release macOS
    needs: validate
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    env:
      # --- Build Flags ---
      CXXFLAGS: --std=c++20
      # --- Signing & Notarization Secrets ---
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      # --- Electron Builder Config ---
      CSC_IDENTITY_AUTO_DISCOVERY: true # Recommended over false unless specific issues
      # --- GitHub Token ---
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies (includes postinstall rebuild attempts)
        # Env flags should be inherited by node-gyp called via postinstall
        run: npm ci

      - name: Rebuild Native Modules Explicitly for Electron
        # Ensure this script uses @electron/rebuild and inherits CXXFLAGS
        run: npm run rebuild-native-modules --verbose

      - name: Download Dist Artifact (if validate uploads it)
        # uses: actions/download-artifact@v4
        # with:
        #   name: dist-artifact
        #   path: dist/
      # OR Build Frontend Again
      - name: Build Frontend (Vite)
        run: npm run build

      - name: Package macOS Application
        # mac-build.js should primarily call 'npx electron-builder --mac'
        run: node scripts/mac-build.js --verbose

      - name: List Build Output
        run: ls -lR release-builds

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ github.ref_name }}
          path: |
            release-builds/**/*.dmg
            release-builds/**/*.zip
          if-no-files-found: error

      - name: Create GitHub Release and Upload macOS Assets
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-builds/**/*.dmg
            release-builds/**/*.zip
          # Use tag name as release name
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true # Generate notes based on commits since last tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 3. Build Windows App
  build_windows:
    name: Build and Release Windows
    needs: validate
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: windows-latest
    env:
      # --- Build Flags for node-gyp & MSVC ---
      GYP_MSVS_VERSION: 2022 # Env var node-gyp uses directly
      CXXFLAGS: /std:c++20    # MSVC flag for C++20
      # PYTHON: Defined in steps # Explicit Python path needed by node-gyp
      # --- GitHub Token ---
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Use a specific, known-good version

      - name: Set PYTHON Environment Variable for node-gyp
        run: echo "PYTHON=${{ env.pythonLocation }}\python.exe" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Setup MSVC Developer Command Prompt environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Configure npm for Windows Build (BEFORE Install)
        # Set npm config keys that node-gyp might query
        # *Avoid* setting CXXFLAGS via npm config
        run: |
          npm config set msvs_version 2022 --location=project
          npm config set python "${{ env.PYTHON }}" --location=project
          echo "---- Set npm config ----"
          npm config list -l
          echo "---- PYTHON env var ----"
          echo "${{ env.PYTHON }}"
          echo "---- GYP_MSVS_VERSION env var ----"
          echo "${{ env.GYP_MSVS_VERSION }}"
        shell: bash

      - name: Install Dependencies (includes postinstall rebuild attempts)
        # Pass env vars explicitly to ensure they are available to node-gyp/rebuild during postinstall
        run: npm ci
        env:
          PYTHON: ${{ env.PYTHON }}
          GYP_MSVS_VERSION: ${{ env.GYP_MSVS_VERSION }}
          CXXFLAGS: ${{ env.CXXFLAGS }} # Also pass CXXFLAGS for good measure

      - name: Rebuild Native Modules Explicitly for Electron
        # Ensure rebuild script inherits the crucial env vars
        run: npm run rebuild-native-modules --verbose
        env:
          PYTHON: ${{ env.PYTHON }}
          GYP_MSVS_VERSION: ${{ env.GYP_MSVS_VERSION }}
          CXXFLAGS: ${{ env.CXXFLAGS }}

      - name: Download Dist Artifact (if validate uploads it)
        # uses: actions/download-artifact@v4
        # with:
        #   name: dist-artifact
        #   path: dist/
      # OR Build Frontend Again
      - name: Build Frontend (Vite)
        run: npm run build

      - name: Package Windows Application
        # Ensure windows-build.js passes env vars if it calls electron-builder
        run: node scripts/windows-build.js --verbose
        env:
          PYTHON: ${{ env.PYTHON }}
          GYP_MSVS_VERSION: ${{ env.GYP_MSVS_VERSION }}
          CXXFLAGS: ${{ env.CXXFLAGS }}

      - name: List Build Output
        run: Get-ChildItem -Recurse release-builds | Select-Object FullName, Length | Format-Table -AutoSize
        shell: pwsh

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.ref_name }}
          path: release-builds/**/*.exe # Upload both setup and portable
          if-no-files-found: error

      - name: Upload Windows Assets to Existing Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: release-builds/**/*.exe
          # Ensure this uploads to the release created by the macOS job
          draft: false
          prerelease: false
          generate_release_notes: false # Prevent overwriting notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}