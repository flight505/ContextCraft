# .github/workflows/build.yml
name: Build and Release Electron App

on:
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    tags: [ 'v*' ] # Trigger on version tags like v1.0.0
  pull_request:
    branches: [ main ]

jobs:
  # 1. Validate Code (Optional but Recommended)
  validate:
    name: Validate Code (Lint & Build Frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Match your project's Node version
          cache: 'npm'

      - name: Install Dependencies (Ignoring Scripts)
        # Ignore postinstall scripts here as we only care about linting/building TS/JS
        run: npm ci --ignore-scripts
        env:
          NPM_CONFIG_IGNORE_SCRIPTS: 'true'

      - name: Lint Code
        run: npm run lint:strict # Use strict linting for CI

      - name: Build Frontend (Vite)
        run: npm run build # Assumes this is your 'vite build' script

  # 2. Build macOS App
  build_macos:
    name: Build and Release macOS
    needs: validate # Run after validation passes
    # Only run full build/release on tag push or manual dispatch
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: macos-latest # Use the latest macOS runner
    env:
      # --- Build Flags ---
      CXXFLAGS: --std=c++20 # Crucial for tree-sitter on macOS with clang
      # --- Signing & Notarization Secrets ---
      # These MUST be configured in your GitHub repository secrets
      CSC_LINK: ${{ secrets.CSC_LINK }}                   # Base64 encoded .p12 certificate file
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}   # Password for the certificate
      APPLE_ID: ${{ secrets.APPLE_ID }}                   # Your Apple Developer ID email
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }} # App-specific password for notarization
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}         # Your Apple Developer Team ID
      # --- Electron Builder Config ---
      CSC_IDENTITY_AUTO_DISCOVERY: true # Let electron-builder find the cert name
      # --- GitHub Token ---
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed for release creation

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        # This will run postinstall scripts which might trigger native module builds
        run: npm ci

      - name: Rebuild Native Modules for Electron
        # Ensure this script correctly uses @electron/rebuild and inherits CXXFLAGS
        run: npm run rebuild-native-modules --verbose

      - name: Build Frontend (Vite)
        # Build again or ensure validate job artifacts are passed if needed
        # Running again is simpler for now
        run: npm run build

      - name: Package macOS Application
        # Run your dedicated mac build script which should call electron-builder
        # Pass --verbose for more detailed logs from electron-builder
        run: node scripts/mac-build.js --verbose

      - name: List Build Output
        run: ls -lR release-builds

      - name: Upload macOS Artifacts (for debugging/testing)
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ github.ref_name }}
          path: |
            release-builds/**/*.dmg
            release-builds/**/*.zip
          if-no-files-found: warn # Don't fail if files aren't found

      - name: Create GitHub Release and Upload Assets
        # Only run this step when a version tag is pushed
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2 # Use v2 for better stability
        with:
          files: |
            release-builds/**/*.dmg
            release-builds/**/*.zip
          draft: false # Publish immediately
          prerelease: false # Mark as a full release
          generate_release_notes: true # Automatically generate notes from commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Inherited, but explicit is fine

  # 3. Build Windows App
  build_windows:
    name: Build and Release Windows
    needs: validate # Run after validation passes
    # Only run full build/release on tag push or manual dispatch
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: windows-latest # Use the latest Windows runner
    env:
      # --- Build Flags ---
      # These are crucial for node-gyp on Windows with MSVC
      CXXFLAGS: /std:c++20       # MSVC flag for C++20
      GYP_MSVS_VERSION: 2022    # Explicitly tell node-gyp which VS version to use
      # PYTHON: defined in steps # Explicit Python path
      # --- GitHub Token ---
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up Python for node-gyp
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Recommended version for node-gyp

      - name: Set PYTHON Environment Variable # Required by node-gyp
        run: echo "PYTHON=${{ env.pythonLocation }}\python.exe" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Setup MSVC Developer Command Prompt
        # Sets up the necessary paths and variables for MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64 # Target x64 builds

      - name: Configure npm for Windows Build
        # Explicitly tell npm/node-gyp which tools to use BEFORE install
        run: |
          # Environment variables are already set at the job level
          # Just display diagnostic information
          echo "---- Current npm config ----"
          npm config list -l
          echo "---- Python Path ----"
          echo "${{ env.PYTHON }}"
          echo "---- GYP MSVS Version ----"
          echo "${{ env.GYP_MSVS_VERSION }}"
        shell: bash

      - name: Install Dependencies
        # Pass env vars explicitly to ensure they are available to postinstall scripts
        run: npm ci
        env:
          PYTHON: ${{ env.PYTHON }}
          GYP_MSVS_VERSION: ${{ env.GYP_MSVS_VERSION }}
          CXXFLAGS: ${{ env.CXXFLAGS }}

      - name: Rebuild Native Modules for Electron
        # Ensure this script uses @electron/rebuild and inherits PYTHON, CXXFLAGS, GYP_MSVS_VERSION
        run: npm run rebuild-native-modules --verbose
        env:
          PYTHON: ${{ env.PYTHON }}
          GYP_MSVS_VERSION: ${{ env.GYP_MSVS_VERSION }}
          CXXFLAGS: ${{ env.CXXFLAGS }}

      - name: Build Frontend (Vite)
        run: npm run build

      - name: Package Windows Application
        # Run your dedicated windows build script
        # Pass --verbose for more detailed logs from electron-builder
        run: node scripts/windows-build.js --verbose
        env:
          PYTHON: ${{ env.PYTHON }}
          GYP_MSVS_VERSION: ${{ env.GYP_MSVS_VERSION }}
          CXXFLAGS: ${{ env.CXXFLAGS }}

      - name: List Build Output
        run: Get-ChildItem -Recurse release-builds | Select-Object FullName, Length | Format-Table -AutoSize
        shell: pwsh

      - name: Upload Windows Artifacts (for debugging/testing)
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.ref_name }}
          path: release-builds/**/*.exe # Upload both setup and portable
          if-no-files-found: warn

      - name: Upload Windows Assets to Existing Release
        # Only run this step when a version tag is pushed
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: release-builds/**/*.exe # Upload both setup and portable
          # Reuse the release created by the macOS job
          draft: false
          prerelease: false
          generate_release_notes: false # Don't overwrite release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}