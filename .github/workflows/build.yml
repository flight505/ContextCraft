name: Build and Release CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    # Always run validation, regardless of trigger
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm install
        continue-on-error: false

      - name: Lint code
        run: npm run lint || true

      - name: Build Vite app
        run: npm run build
        env:
          CI: true

  build_and_release:
    name: Build for ${{ matrix.os }}
    needs: validate
    # Only run build job if it's a tag push or manually triggered
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            package_cmd: npm run package:mac -- --verbose
            artifact_pattern: |
              release-builds/**/*.dmg
              release-builds/**/*.zip
            release_glob: |
              release-builds/**/*.dmg
              release-builds/**/*.zip
          - os: windows-latest
            package_cmd: npm run package:win -- --verbose
            artifact_pattern: |
              release-builds/**/*.exe
              release-builds/**/*.msi
            release_glob: release-builds/**/*.exe
          - os: ubuntu-latest
            package_cmd: npm run package:linux -- --verbose
            artifact_pattern: |
              release-builds/**/*.AppImage
              release-builds/**/*.deb
              release-builds/**/*.rpm
            release_glob: release-builds/**/*.AppImage

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Debug - Environment info
        run: |
          echo "OS: ${{ runner.os }}"
          echo "Node: $(node -v)"
          echo "NPM: $(npm -v)"
          echo "Working directory: $(pwd)"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Is tag: ${{ startsWith(github.ref, 'refs/tags/') }}"

      - name: Install dependencies
        run: npm install
        continue-on-error: false

      - name: List installed packages
        run: npm list --depth=0 || true

      - name: Build Vite app
        run: npm run build
        env:
          CI: true

      - name: Debug - Project structure before build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "Package.json contents (build section):"
          Get-Content package.json | Select-String -Pattern '"build":' -SimpleMatch -Context 0,50
          
          echo "Project structure:"
          Get-ChildItem -Recurse -Depth 2 | Where-Object { -not $_.FullName.Contains("node_modules") -and -not $_.FullName.Contains(".git") } | Select-Object FullName

      - name: Debug - Project structure before build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Package.json contents (build section):"
          grep -A 50 '"build":' package.json
          
          echo "Project structure:"
          find . -type d -not -path "*/node_modules/*" -not -path "*/.git/*" -maxdepth 3 | sort

      - name: Create release-builds directory
        run: mkdir -p release-builds
        shell: bash

      # Verify Apple signing credentials (macOS only)
      - name: Verify Apple signing credentials
        if: runner.os == 'macOS'
        run: |
          echo "Verifying Apple signing credentials..."
          echo "APPLE_ID is set: ${{ secrets.APPLE_ID != '' }}"
          echo "APPLE_APP_SPECIFIC_PASSWORD is set: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD != '' }}"
          echo "APPLE_TEAM_ID is set: ${{ secrets.APPLE_TEAM_ID != '' }}"
          echo "CSC_LINK is set: ${{ secrets.CSC_LINK != '' }}"
          echo "CSC_KEY_PASSWORD is set: ${{ secrets.CSC_KEY_PASSWORD != '' }}"
          echo "CSC_IDENTITY_AUTO_DISCOVERY is set to: ${{ runner.os == 'macOS' }}"
        shell: bash

      # Run diagnostics script for macOS builds
      - name: Run build diagnostics for macOS
        if: runner.os == 'macOS'
        run: |
          echo "Running build diagnostics to gather detailed environment information..."
          node scripts/diagnose-build.js
        shell: bash
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_IDENTITY_AUTO_DISCOVERY: ${{ runner.os == 'macOS' }}

      - name: Package Application
        run: ${{ matrix.package_cmd }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Set environment variables for code signing and notarization (macOS only)
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # Enable code signing and notarization for macOS builds
          CSC_IDENTITY_AUTO_DISCOVERY: ${{ runner.os == 'macOS' }}
          # Enable debug for electron-builder
          DEBUG: electron-builder

      - name: List Build Output (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Listing output in release-builds..."
          ls -lha release-builds/ || echo "release-builds directory not found or empty."
          
          echo "Listing dist directory..."
          ls -lha dist/ || echo "dist directory not found or empty."
          
          echo "Finding specific files..."
          find . -type f \( -name "ContextCraft*.dmg" -o -name "ContextCraft*.zip" -o -name "ContextCraft*.exe" -o -name "ContextCraft*.msi" -o -name "ContextCraft*.AppImage" -o -name "ContextCraft*.deb" -o -name "ContextCraft*.rpm" \) | grep -v "node_modules" || echo "No expected artifacts found."
        shell: bash

      - name: List Build Output (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "Listing output in release-builds..."
          if (Test-Path -Path release-builds) { 
            Get-ChildItem -Path release-builds -Force -Recurse
          } else { 
            echo "release-builds directory not found or empty."
          }
          
          echo "Listing dist directory..."
          if (Test-Path -Path dist) { 
            Get-ChildItem -Path dist -Force 
          } else { 
            echo "dist directory not found or empty."
          }
          
          echo "Finding specific files..."
          Get-ChildItem -Path . -Recurse -Include "ContextCraft*.dmg","ContextCraft*.zip","ContextCraft*.exe","ContextCraft*.msi","ContextCraft*.AppImage","ContextCraft*.deb","ContextCraft*.rpm" -ErrorAction SilentlyContinue

      - name: Debug build output location
        run: |
          echo "Project root contents:"
          ls -la
          
          echo "Looking for all build artifacts recursively:"
          find . -type f \( -name "ContextCraft*.dmg" -o -name "ContextCraft*.zip" -o -name "ContextCraft*.exe" -o -name "ContextCraft*.AppImage" -o -name "ContextCraft*.deb" -o -name "ContextCraft*.rpm" \) | grep -v "node_modules" || echo "No expected artifacts found."
        shell: bash

      # Special debug for macOS builds
      - name: Debug macOS artifacts
        if: runner.os == 'macOS'
        run: |
          echo "Detailed macOS artifact search:"
          find . -name "*.dmg" -o -name "*.zip" | sort
          
          echo "Contents of release-builds directory (recursive):"
          find release-builds -type f | sort
          
          echo "DMG file info (if exists):"
          find . -name "*.dmg" -exec file {} \;
          
          # If no DMG file found, output electron-builder debug info
          if [ $(find . -name "*.dmg" | wc -l) -eq 0 ]; then
            echo "No DMG files found. Running macOS diagnostic script again..."
            node scripts/diagnose-build.js
            
            # Show electron-builder temporary directory contents if it exists
            echo "Checking electron-builder temp directories..."
            ls -la ~/Library/Caches/electron-builder/ || echo "electron-builder cache not found"
            
            # Verify if package.json mac target includes dmg
            echo "Checking package.json mac target configuration..."
            grep -A 10 '"mac":' package.json
          fi
        shell: bash

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: ${{ matrix.artifact_pattern }}
          if-no-files-found: warn

      # Failsafe for macOS builds - upload whatever we have
      - name: Upload macOS artifacts (failsafe)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-all
          path: |
            release-builds/**/*
          if-no-files-found: warn

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.release_glob }}
          fail_on_unmatched_files: false 
          draft: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}